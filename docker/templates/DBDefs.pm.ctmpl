{{- define "QUOTED_STRING" -}}
    '{{- . | replaceAll "\\" "\\\\" | replaceAll "'" "\\'" -}}'
{{- end -}}

{{- define "dbdefs_key" -}}
    {{- $key := (printf "docker-server-configs/services/%s.musicbrainz-server.json/DBDefs/%s" (or (env "DEPLOY_ENV") "dev") .) -}}
    {{- if keyExists $key -}}{{- $key -}}{{- end -}}
{{- end -}}

{{- define "BOOLEAN_DEF" -}}
    {{- if $key := (executeTemplate "dbdefs_key" .) }}
        sub {{ . }} { {{if eq (key $key) "1"}}1{{else}}0{{end}} }
    {{- end -}}
{{- end -}}

{{- define "CODE_DEF" -}}
    {{- if $key := (executeTemplate "dbdefs_key" .) }}
        sub {{ . }} { {{ key $key }} }
    {{- end -}}
{{- end -}}

{{- define "STRING_DEF" -}}
    {{- if $key := (executeTemplate "dbdefs_key" .) }}
        sub {{ . }} { {{executeTemplate "QUOTED_STRING" (key $key)}} }
    {{- end -}}
{{- end -}}

{{- define "WORDS_DEF" -}}
    {{- if $key := (executeTemplate "dbdefs_key" .) }}
        sub {{ . }} { qw( {{ (key $key) }} ) }
    {{- end -}}
{{- end -}}

package DBDefs;

use strict;
use warnings;

use base 'DBDefs::Default';

use MusicBrainz::Server::DatabaseConnectionFactory;
use MusicBrainz::Server::Replication ':replication_type';

MusicBrainz::Server::DatabaseConnectionFactory->register_databases(
    {{with $service_name := or (env "MBS_MAINTENANCE_DB_SERVICE") "postgres-master"}}
    {{- if service $service_name}}
    {{- with index (service $service_name) 0}}
    MAINTENANCE => {
        database    => '{{or (env "MBS_MAINTENANCE_DB_NAME") "musicbrainz_db"}}',
        schema      => 'musicbrainz',
        username    => 'musicbrainz',
        host        => '{{.Address}}',
        port        => {{.Port}},
    },
    {{- end}}
    {{- end}}
    {{- end}}
    {{with $service_name := or (env "MBS_SYSTEM_DB_SERVICE") "postgres-master"}}
    {{- if service $service_name}}
    {{- with index (service $service_name) 0}}
    SYSTEM => {
        database    => '{{or (env "MBS_SYSTEM_DB_NAME") "template1"}}',
        schema      => '',
        username    => 'postgres',
        host        => '{{.Address}}',
        port        => {{.Port}},
    },
    {{- end}}
    {{- end}}
    {{- end}}
    {{with $service_name := or (env "MBS_TEST_DB_SERVICE") "postgres-master"}}
    {{- if service $service_name}}
    {{- with index (service $service_name) 0}}
    TEST => {
        database    => '{{or (env "MBS_TEST_DB_NAME") "musicbrainz_test"}}',
        schema      => 'musicbrainz',
        username    => 'musicbrainz',
        host        => '{{.Address}}',
        port        => {{.Port}},
    },
    {{- end}}
    {{- end}}
    {{- end}}
    {{with $service_name := or (env "MBS_READWRITE_DB_SERVICE") "pgbouncer-master"}}
    {{- if service $service_name}}
    {{- with index (service $service_name) 0}}
    READWRITE => {
        database    => '{{or (env "MBS_READWRITE_DB_NAME") "musicbrainz_db"}}',
        schema      => 'musicbrainz',
        username    => 'musicbrainz',
        host        => '{{.Address}}',
        port        => {{.Port}},
    },
    {{- end}}
    {{- end}}
    {{- end}}
    {{with $service_name := or (env "MBS_READONLY_DB_SERVICE") "pgbouncer-slave"}}
    {{- if service $service_name}}
    {{- with index (service $service_name) 0}}
    READONLY => {
        database    => '{{or (env "MBS_READONLY_DB_NAME") "musicbrainz_db"}}',
        schema      => 'musicbrainz',
        username    => 'musicbrainz',
        host        => '{{.Address}}',
        port        => {{.Port}},
    },
    {{- end}}
    {{- end}}
    {{- end}}
);

{{with $service_name := or (env "MBS_SMTP_SERVICE") "default.exim-relay"}}
{{- if service $service_name}}
{{- with index (service $service_name) 0}}
sub SMTP_SERVER { '{{.Address}}:{{.Port}}' }
{{- end}}
{{- end}}
{{- end}}

{{with $service_name := or (env "MBS_REDIS_STORE_SERVICE") "musicbrainz-redis-store"}}
{{- if service $service_name}}
{{- with index (service $service_name) 0}}
sub DATASTORE_REDIS_ARGS {
    return {
        namespace => 'MB:',
        test_database => 1,
        database => 0,
        server => '{{.Address}}:{{.Port}}',
    };
}
{{- end}}
{{- end}}
{{- end}}

{{with $service_name := or (env "MBS_REDIS_CACHE_SERVICE") "musicbrainz-redis-cache"}}
{{- if service $service_name}}
{{- with index (service $service_name) 0}}
sub PLUGIN_CACHE_OPTIONS {
    my $self = shift;
    return {
        class => 'MusicBrainz::Server::CacheWrapper::Redis',
        server => '{{.Address}}:{{.Port}}',
        namespace => 'MB:Catalyst:',
    };
}

sub CACHE_MANAGER_OPTIONS {
    my $self = shift;
    my %CACHE_MANAGER_OPTIONS = (
        profiles => {
            external => {
                class => 'MusicBrainz::Server::CacheWrapper::Redis',
                options => {
                    server => '{{.Address}}:{{.Port}}',
                    namespace => 'MB:',
                },
            },
        },
        default_profile => 'external',
    );
    return \%CACHE_MANAGER_OPTIONS
}
{{- end}}
{{- end}}
{{- end}}

sub COVER_ART_ARCHIVE_ACCESS_KEY { {{executeTemplate "QUOTED_STRING" (keyOrDefault "docker-server-configs/constants.json/caa_access_key" "")}} }

sub COVER_ART_ARCHIVE_SECRET_KEY { {{executeTemplate "QUOTED_STRING" (keyOrDefault "docker-server-configs/constants.json/caa_secret_key" "")}} }

{{- if env "GIT_BRANCH"}}
sub GIT_BRANCH { {{executeTemplate "QUOTED_STRING" (env "GIT_BRANCH")}} }
{{- end}}

{{- if env "GIT_MSG"}}
sub GIT_MSG { {{executeTemplate "QUOTED_STRING" (env "GIT_MSG")}} }
{{- end}}

{{- if env "GIT_SHA"}}
sub GIT_SHA { {{executeTemplate "QUOTED_STRING" (env "GIT_SHA")}} }
{{- end}}

{{executeTemplate "BOOLEAN_DEF" "CATALYST_DEBUG"}}
{{executeTemplate "BOOLEAN_DEF" "DB_READ_ONLY"}}
{{executeTemplate "BOOLEAN_DEF" "DB_STAGING_SERVER"}}
{{executeTemplate "BOOLEAN_DEF" "DB_STAGING_SERVER_SANITIZED"}}
{{executeTemplate "BOOLEAN_DEF" "DB_STAGING_TESTING_FEATURES"}}
{{executeTemplate "BOOLEAN_DEF" "DEVELOPMENT_SERVER"}}
{{executeTemplate "BOOLEAN_DEF" "FORK_RENDERER"}}
{{executeTemplate "BOOLEAN_DEF" "IS_BETA"}}
{{executeTemplate "BOOLEAN_DEF" "SEARCH_X_ACCEL_REDIRECT"}}
{{executeTemplate "BOOLEAN_DEF" "SSL_REDIRECTS_ENABLED"}}
{{executeTemplate "CODE_DEF" "DB_STAGING_SERVER_DESCRIPTION"}}
{{executeTemplate "CODE_DEF" "ENTITY_CACHE_TTL"}}
{{executeTemplate "CODE_DEF" "REPLICATION_TYPE"}}
{{executeTemplate "STRING_DEF" "AMAZON_ASSOCIATE_TAG"}}
{{executeTemplate "STRING_DEF" "AWS_PRIVATE"}}
{{executeTemplate "STRING_DEF" "AWS_PUBLIC"}}
{{executeTemplate "STRING_DEF" "BETA_REDIRECT_HOSTNAME"}}
{{executeTemplate "STRING_DEF" "DB_SCHEMA_SEQUENCE"}}
{{executeTemplate "STRING_DEF" "DETERMINE_MAX_REQUEST_TIME"}}
{{executeTemplate "STRING_DEF" "DISCOURSE_API_KEY"}}
{{executeTemplate "STRING_DEF" "DISCOURSE_API_USERNAME"}}
{{executeTemplate "STRING_DEF" "DISCOURSE_SERVER"}}
{{executeTemplate "STRING_DEF" "DISCOURSE_SSO_SECRET"}}
{{executeTemplate "STRING_DEF" "GOOGLE_ANALYTICS_CODE"}}
{{executeTemplate "STRING_DEF" "GOOGLE_CUSTOM_SEARCH"}}
{{executeTemplate "STRING_DEF" "GPG_ENCRYPT_KEY"}}
{{executeTemplate "STRING_DEF" "GPG_SIGN_KEY"}}
{{executeTemplate "STRING_DEF" "MAPBOX_ACCESS_TOKEN"}}
{{executeTemplate "STRING_DEF" "RECAPTCHA_PRIVATE_KEY"}}
{{executeTemplate "STRING_DEF" "RECAPTCHA_PUBLIC_KEY"}}
{{executeTemplate "STRING_DEF" "RENDERER_SOCKET"}}
{{executeTemplate "STRING_DEF" "REPLICATION_ACCESS_TOKEN"}}
{{executeTemplate "STRING_DEF" "SEARCH_ENGINE"}}
{{executeTemplate "STRING_DEF" "SEARCH_SERVER"}}
{{executeTemplate "STRING_DEF" "SENTRY_DSN"}}
{{executeTemplate "STRING_DEF" "SENTRY_DSN_PUBLIC"}}
{{executeTemplate "STRING_DEF" "SESSION_COOKIE"}}
{{executeTemplate "STRING_DEF" "SMTP_SECRET_CHECKSUM"}}
{{executeTemplate "STRING_DEF" "STATIC_RESOURCES_LOCATION"}}
{{executeTemplate "STRING_DEF" "WEB_SERVER"}}
{{executeTemplate "STRING_DEF" "WEB_SERVER_SSL"}}
{{executeTemplate "STRING_DEF" "WEB_SERVER_USED_IN_EMAIL"}}
{{executeTemplate "WORDS_DEF" "MB_LANGUAGES"}}

1;
